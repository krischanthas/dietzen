// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// schema.prisma

// model Post {
//   id        String  @id @default(cuid())
//   title     String
//   content   String?
//   published Boolean @default(false)
//   author    User?   @relation(fields: [authorId], references: [id])
//   authorId  String?
// }

model Meal {
  id       String  @id @default(cuid())
  title    String
  brand    String
  calories String
  serving String
  servingSize String
  fat String
  carbohydrates String
  protein  String 
  unit String 
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?
  createdAt        DateTime  @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime           @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  // posts         Post[]
  accounts      Account[]
  sessions      Session[]
  meals         Meal[]
  goal  Goal? 
}

model Goal {
  id  String @id @default(cuid())
  fat String
  carbohydrates String
  protein  String 
  user   User   @relation(fields: [id], references: [id])
  userId Int    @unique
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
